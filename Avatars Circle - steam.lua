--[[
Working on aimware havoc vision rpg
by qi
]]
--region aw api
--local variables for API. Automatically generated by https://github.com/simpleavaster/gslua/blob/master/authors/sapphyrus/generate_api.lua
--I only made a little change to make him work for aimware
local entities_GetPlayerResources, entities_FindByClass, entities_GetByIndex, entities_GetLocalPlayer, entities_GetByUserID =
    entities.GetPlayerResources,
    entities.FindByClass,
    entities.GetByIndex,
    entities.GetLocalPlayer,
    entities.GetByUserID
local client_GetLocalPlayerIndex,
    client_ChatSay,
    client_WorldToScreen,
    client_Command,
    client_GetPlayerIndexByUserID,
    client_SetConVar,
    client_GetPlayerInfo,
    client_GetConVar =
    client.GetLocalPlayerIndex,
    client.ChatSay,
    client.WorldToScreen,
    client.Command,
    client.GetPlayerIndexByUserID,
    client.SetConVar,
    client.GetPlayerInfo,
    client.GetConVar
local client_GetPlayerNameByIndex, client_GetPlayerNameByUserID, client_ChatTeamSay, client_AllowListener =
    client.GetPlayerNameByIndex,
    client.GetPlayerNameByUserID,
    client.ChatTeamSay,
    client.AllowListener
local globals_FrameTime,
    globals_AbsoluteFrameTime,
    globals_CurTime,
    globals_TickCount,
    globals_MaxClients,
    globals_RealTime,
    globals_FrameCount,
    globals_TickInterval =
    globals.FrameTime,
    globals.AbsoluteFrameTime,
    globals.CurTime,
    globals.TickCount,
    globals.MaxClients,
    globals.RealTime,
    globals.FrameCount,
    globals.TickInterval
local http_Get = http.Get
local math_ceil,
    math_tan,
    math_huge,
    math_log10,
    math_randomseed,
    math_cos,
    math_sinh,
    math_random,
    math_mod,
    math_pi,
    math_max,
    math_atan2,
    math_ldexp,
    math_floor,
    math_sqrt,
    math_deg,
    math_atan =
    math.ceil,
    math.tan,
    math.huge,
    math.log10,
    math.randomseed,
    math.cos,
    math.sinh,
    math.random,
    math.mod,
    math.pi,
    math.max,
    math.atan2,
    math.ldexp,
    math.floor,
    math.sqrt,
    math.deg,
    math.atan
local math_fmod,
    math_acos,
    math_pow,
    math_abs,
    math_min,
    math_log,
    math_frexp,
    math_sin,
    math_tanh,
    math_exp,
    math_modf,
    math_cosh,
    math_asin,
    math_rad =
    math.fmod,
    math.acos,
    math.pow,
    math.abs,
    math.min,
    math.log,
    math.frexp,
    math.sin,
    math.tanh,
    math.exp,
    math.modf,
    math.cosh,
    math.asin,
    math.rad
local table_foreach, table_sort, table_remove, table_foreachi, table_maxn, table_getn, table_concat, table_insert =
    table.foreach,
    table.sort,
    table.remove,
    table.foreachi,
    table.maxn,
    table.getn,
    table.concat,
    table.insert
local string_find,
    string_lower,
    string_format,
    string_rep,
    string_gsub,
    string_len,
    string_gmatch,
    string_dump,
    string_match,
    string_reverse,
    string_byte,
    string_char,
    string_upper,
    string_gfind,
    string_sub =
    string.find,
    string.lower,
    string.format,
    string.rep,
    string.gsub,
    string.len,
    string.gmatch,
    string.dump,
    string.match,
    string.reverse,
    string.byte,
    string.char,
    string.upper,
    string.gfind,
    string.sub
--endregion

--region renderer
http_Get(
    "https://raw.githubusercontent.com/287871/aimware/main/renderer.lua",
    function(raw)
        if type(loadstring(raw)()) == "table" then
            renderer = loadstring(raw)()
        else
            callbacks.Register(
                "Draw",
                function()
                    draw.TextShadow(5, 5, "Link error, please check network")
                end
            )
        end
    end
)
--endregion

--region gui

--reference
local menu = gui.Reference("menu")
local ref = gui.Reference("visuals", "local", "camera")

--dragging
local dragging = function(reference, name, base_x, base_y)
    return (function()
        local a = {}
        local b, c, d, e, f, g, h, i, j, k, l, m, n, o
        local p = {
            __index = {
                drag = function(self, ...)
                    local q, r = self:get()
                    local s, t = a.drag(q, r, ...)
                    if q ~= s or r ~= t then
                        self:set(s, t)
                    end
                    return s, t
                end,
                set = function(self, q, r)
                    local j, k = draw.GetScreenSize()
                    self.x_reference:SetValue(q / j * self.res)
                    self.y_reference:SetValue(r / k * self.res)
                end,
                get = function(self)
                    local j, k = draw.GetScreenSize()
                    return self.x_reference:GetValue() / self.res * j, self.y_reference:GetValue() / self.res * k
                end
            }
        }
        function a.new(r, u, v, w, x)
            x = x or 10000
            local j, k = draw.GetScreenSize()
            local y = gui.Slider(r, "x", u .. " position x", v / j * x, 0, x)
            local z = gui.Slider(r, "y", u .. " position y", w / k * x, 0, x)
            y:SetInvisible(true)
            z:SetInvisible(true)
            return setmetatable({reference = r, name = u, x_reference = y, y_reference = z, res = x}, p)
        end
        function a.drag(q, r, A, B, C, D, E)
            if globals_FrameCount ~= b then
                c = menu:IsActive()
                f, g = d, e
                d, e = input.GetMousePos()
                i = h
                h = input.IsButtonDown(0x01) == true
                m = l
                l = {}
                o = n
                n = false
                j, k = draw.GetScreenSize()
            end
            if c and i ~= nil then
                if (not i or o) and h and f > q and g > r and f < q + A and g < r + B then
                    n = true
                    q, r = q + d - f, r + e - g
                    if not D then
                        q = math_max(0, math_min(j - A, q))
                        r = math_max(0, math_min(k - B, r))
                    end
                end
            end
            table_insert(l, {q, r, A, B})
            return q, r, A, B
        end
        return a
    end)().new(reference, name, base_x, base_y)
end

local screen_size = {draw.GetScreenSize()}

local havoc_vision_rpg = gui.Checkbox(ref, "havoc.vision.rpg", "havoc vision rpg", 1)
local havoc_vision_rpg_clr = gui.ColorPicker(havoc_vision_rpg, "clr", "clr", 255, 198, 0, 255)
local havoc_vision_rpg_clr2 = gui.ColorPicker(havoc_vision_rpg, "clr2", "clr2", 255, 255, 255, 255)

local havoc_vision_rpg_dragging = dragging(havoc_vision_rpg, "havoc vision rpg", screen_size[1] * 0.2, screen_size[2] * 0.2)

if not avatars_texture then
    local steam_id = "7656" .. (0x116ebff0000 + client.GetPlayerInfo(1)["SteamID"])
    http_Get(
        "https://steamcommunity.com/profiles/" .. steam_id,
        function(steamcommunity_body)
            local img_url =
                string_match(
                steamcommunity_body,
                '<link rel="image_src" href="(https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/avatars/[^\n]+)'
            )
            http_Get(
                "https://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/14/14f9604e16dcce51b840ad0e477354dc6ee30b60_full.jpg",
                function(jpg_date)
                    avatars_texture = renderer.load_jpg(jpg_date)
                end
            )
        end
    )
end
local function set_gui(object)
    havoc_vision_rpg_clr:SetInvisible(not object)
    havoc_vision_rpg_clr2:SetInvisible(not object)
end
--endregion

--region clamp
local function clamp(val, min, max)
    if (val > max) then
        return max
    elseif (val < min) then
        return min
    else
        return val
    end
end
--endregion

--region draw havoc_vision_rpg

--font
local font = draw.CreateFont("Verdana", 12)
local font2 = draw.CreateFont("Verdana", 13)

--alpha
local health_alpha = 0
local armor_alpha = 0

--get server ip
local function get_server()
    if (engine.GetServerIP() == "loopback") then
        return "localhost"
    elseif string_find(engine.GetServerIP(), "A") then
        return "valve(mm)"
    else
        return "unknown"
    end
end

--get name
local function get_name()
    local name = client_GetPlayerNameByIndex(1)
    if string_len(name) > 8 then -- Calculate name length
        return string_match(name, [[........]]) .. "..."
    else
        return name
    end
end

--get lineup
local function get_lineup(entities)
    if entities then
        if entities:GetTeamNumber() == 2 then -- Calculate name length
            return "T"
        elseif entities:GetTeamNumber() == 3 then
            return "CT"
        end
    end
end

--Main havoc_vision_rpg
local function draw_havoc_vision_rpg()
    local lp = entities_GetLocalPlayer()

    if not (lp and lp:IsAlive() and havoc_vision_rpg:GetValue()) then
        return
    end
    local fade_factor = ((1.0 / 0.15) * globals_FrameTime()) * 30

    --return x y
    local x, y = havoc_vision_rpg_dragging:get()
    local x, y = math_modf(x), math_modf(y)
    local x, y = x + 60, y + 60

    havoc_vision_rpg_dragging:drag(100, 100)

    local r, g, b, a = 34, 34, 34, 255

    --information bar gradient
    renderer.gradient(x - 115, y - 23, 25, 23, r, g, b, 0, r, g, b, a, true)
    renderer.gradient(x + 160, y, 25, 20, r, g, b, a, r, g, b, 0, true)
    renderer.gradient(x + 185, y - 35, 45, 25, r, g, b, a, r, g, b, 0, true)

    --information bar filledRect
    draw.Color(r, g, b, a)
    draw.FilledRect(x - 90, y - 23, x - 45, y)
    draw.FilledRect(x + 50, y, x + 160, y + 20)

    --picture
    draw.Color(255, 255, 255, 255)
    draw.FilledCircle(x, y, 55)
    renderer.texture(avatars_texture, x - 41, y - 41, 81, 81)

    --lineup circle
    draw.Color(8, 120, 193, 180)
    draw.FilledCircle(x, y + 40, 14.5)
    for i = 1, 15 * 0.3 do
        local a = i / 15 * 180
        draw.Color(8, 120, 193, a)
        draw.OutlinedCircle(x, y + 40, 15 * 0.95 + i * 0.2)
        draw.OutlinedCircle(x, y + 40, 15 - i * 0.2)
    end

    --health
    --circle_outline
    local health = lp:GetHealth()
    local health_r = (134 * health / 100) + (255 * (1 - health / 100))
    local health_g = (200 * health / 100) + (75 * (1 - health / 100))
    local health_b = (134 * health / 100) + (20 * (1 - health / 100))

    if health ~= 100 then
        health_alpha = clamp(health_alpha - fade_factor, health, 100)
    else
        health_alpha = clamp(health_alpha + fade_factor, 0, health)
    end

    renderer.circle_outline(x, y, health_r, health_g, health_b, a, 61.5, 67, -health_alpha * 0.0025, 2, 4)
    renderer.circle_outline(x, y, health_r, health_g, health_b, 70, 62, 67, -health_alpha * 0.0025, 2, 4)

    --background circle
    draw.Color(r, g, b, a)
    draw.OutlinedCircle(x, y, 59)

    for i = 0, 5 do
        draw.RoundedRect(x + (i * 2) - 60, y + (i * 2) - 60, x + 60 - (i * 2), y + 60 - (i * 2), 60 - i, 60 - i, 60 - i, 60 - i, 60 - i)
    end
    draw.OutlinedCircle(x, y, 43)

    --reduce serration
    for i = 1, 43.8 * 0.3 do
        local a = i / 43.8 * a
        draw.Color(r, g, b, a)
        draw.OutlinedCircle(x, y, 43.8 * 0.95 + i * 0.2)
        draw.OutlinedCircle(x, y, 43.8 - i * 0.2)
    end

    --information bar filledRect
    --cover health circle_outline
    draw.Color(r, g, b, a)
    draw.FilledRect(x + 40, y - 35, x + 185, y - 10)

    --armor circle_outline
    local armor = lp:GetProp("m_ArmorValue")
    if armor ~= 100 then
        armor_alpha = clamp(armor_alpha - fade_factor, armor, 100)
    else
        armor_alpha = clamp(armor_alpha + fade_factor, 0, armor)
    end

    renderer.circle_outline(x, y, 80, 163, 248, 200, 43, 0, armor_alpha * 0.0025, 1, 4)
    renderer.circle_outline(x, y, 80, 163, 248, 50, 43.5, 0, armor_alpha * 0.0025, 2, 4)

    --text
    local r, g, b, a = havoc_vision_rpg_clr:GetValue()
    local r2, g2, b2, a2 = havoc_vision_rpg_clr2:GetValue()

    --lineup
    local lineup = get_lineup(lp)
    local w = renderer.measure_text(lineup, font2)
    draw.SetFont(font2)
    renderer.text(x - w / 2, y + 30, r2, g2, b2, 255, lineup, "s")

    --health
    local health_text = health .. " hp"
    local w = renderer.measure_text(health_text, font)
    draw.SetFont(font)
    renderer.text(x - 65 - w, y - 16, health_r, health_g, health_b, a, health_text, "s")

    --server and name

    local server = get_server()
    local name = get_name()
    local text = string_format("%s ● Hello  %s", server, name)
    renderer.text(x + 65, y - 27, r2, g2, b2, 255, text, "s")

    --adventurer
    local m_iAccount = lp:GetProp("m_iAccount")
    renderer.text(x + 65, y + 5, r, g, b, 255, "Adventurer", "s")
    renderer.text(x + 120, y + 5, r2, g2, b2, 255, " ● " .. m_iAccount, "s")
end
--endregion

--region callbacks
callbacks.Register(
    "Draw",
    function()
        if renderer then
            set_gui(havoc_vision_rpg:GetValue())
            draw_havoc_vision_rpg()
        end
    end
)
--endregion
